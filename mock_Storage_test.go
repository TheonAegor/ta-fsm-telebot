// Code generated by mockery v2.33.2. DO NOT EDIT.

package fsm

import mock "github.com/stretchr/testify/mock"

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Close() *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorage_Close_Call) Run(run func()) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return(_a0 error) *MockStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func() error) *MockStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetData provides a mock function with given fields: chatId, userId, key, to
func (_m *MockStorage) GetData(chatId int64, userId int64, key string, to interface{}) error {
	ret := _m.Called(chatId, userId, key, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, string, interface{}) error); ok {
		r0 = rf(chatId, userId, key, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_GetData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetData'
type MockStorage_GetData_Call struct {
	*mock.Call
}

// GetData is a helper method to define mock.On call
//   - chatId int64
//   - userId int64
//   - key string
//   - to interface{}
func (_e *MockStorage_Expecter) GetData(chatId interface{}, userId interface{}, key interface{}, to interface{}) *MockStorage_GetData_Call {
	return &MockStorage_GetData_Call{Call: _e.mock.On("GetData", chatId, userId, key, to)}
}

func (_c *MockStorage_GetData_Call) Run(run func(chatId int64, userId int64, key string, to interface{})) *MockStorage_GetData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockStorage_GetData_Call) Return(_a0 error) *MockStorage_GetData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_GetData_Call) RunAndReturn(run func(int64, int64, string, interface{}) error) *MockStorage_GetData_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields: chatId, userId
func (_m *MockStorage) GetState(chatId int64, userId int64) (State, error) {
	ret := _m.Called(chatId, userId)

	var r0 State
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (State, error)); ok {
		return rf(chatId, userId)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) State); ok {
		r0 = rf(chatId, userId)
	} else {
		r0 = ret.Get(0).(State)
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockStorage_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - chatId int64
//   - userId int64
func (_e *MockStorage_Expecter) GetState(chatId interface{}, userId interface{}) *MockStorage_GetState_Call {
	return &MockStorage_GetState_Call{Call: _e.mock.On("GetState", chatId, userId)}
}

func (_c *MockStorage_GetState_Call) Run(run func(chatId int64, userId int64)) *MockStorage_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *MockStorage_GetState_Call) Return(_a0 State, _a1 error) *MockStorage_GetState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_GetState_Call) RunAndReturn(run func(int64, int64) (State, error)) *MockStorage_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// ResetState provides a mock function with given fields: chatId, userId, withData
func (_m *MockStorage) ResetState(chatId int64, userId int64, withData bool) error {
	ret := _m.Called(chatId, userId, withData)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, bool) error); ok {
		r0 = rf(chatId, userId, withData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_ResetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetState'
type MockStorage_ResetState_Call struct {
	*mock.Call
}

// ResetState is a helper method to define mock.On call
//   - chatId int64
//   - userId int64
//   - withData bool
func (_e *MockStorage_Expecter) ResetState(chatId interface{}, userId interface{}, withData interface{}) *MockStorage_ResetState_Call {
	return &MockStorage_ResetState_Call{Call: _e.mock.On("ResetState", chatId, userId, withData)}
}

func (_c *MockStorage_ResetState_Call) Run(run func(chatId int64, userId int64, withData bool)) *MockStorage_ResetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockStorage_ResetState_Call) Return(_a0 error) *MockStorage_ResetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_ResetState_Call) RunAndReturn(run func(int64, int64, bool) error) *MockStorage_ResetState_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function with given fields: chatId, userId, state
func (_m *MockStorage) SetState(chatId int64, userId int64, state State) error {
	ret := _m.Called(chatId, userId, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, State) error); ok {
		r0 = rf(chatId, userId, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type MockStorage_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - chatId int64
//   - userId int64
//   - state State
func (_e *MockStorage_Expecter) SetState(chatId interface{}, userId interface{}, state interface{}) *MockStorage_SetState_Call {
	return &MockStorage_SetState_Call{Call: _e.mock.On("SetState", chatId, userId, state)}
}

func (_c *MockStorage_SetState_Call) Run(run func(chatId int64, userId int64, state State)) *MockStorage_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(State))
	})
	return _c
}

func (_c *MockStorage_SetState_Call) Return(_a0 error) *MockStorage_SetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_SetState_Call) RunAndReturn(run func(int64, int64, State) error) *MockStorage_SetState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateData provides a mock function with given fields: chatId, userId, key, data
func (_m *MockStorage) UpdateData(chatId int64, userId int64, key string, data interface{}) error {
	ret := _m.Called(chatId, userId, key, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, string, interface{}) error); ok {
		r0 = rf(chatId, userId, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_UpdateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateData'
type MockStorage_UpdateData_Call struct {
	*mock.Call
}

// UpdateData is a helper method to define mock.On call
//   - chatId int64
//   - userId int64
//   - key string
//   - data interface{}
func (_e *MockStorage_Expecter) UpdateData(chatId interface{}, userId interface{}, key interface{}, data interface{}) *MockStorage_UpdateData_Call {
	return &MockStorage_UpdateData_Call{Call: _e.mock.On("UpdateData", chatId, userId, key, data)}
}

func (_c *MockStorage_UpdateData_Call) Run(run func(chatId int64, userId int64, key string, data interface{})) *MockStorage_UpdateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockStorage_UpdateData_Call) Return(_a0 error) *MockStorage_UpdateData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_UpdateData_Call) RunAndReturn(run func(int64, int64, string, interface{}) error) *MockStorage_UpdateData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
